pragma Ada_2012;
package body Qv.Input.SFML is

   -------------------
   -- To_Sf_Keycode --
   -------------------

   function To_Sf_Keycode
     (K : Keycode_Type) return Sf.Window.Keyboard.sfKeyCode
   is
      use Sf.Window.Keyboard;
      C : sfKeyCode := sfKeyUnknown;
   begin
      case K is
         when Key_A =>
            C := sfKeyA;
         when Key_B =>
            C := sfKeyB;
         when Key_C =>
            C := sfKeyC;
         when Key_D =>
            C := sfKeyD;
         when Key_E =>
            C := sfKeyE;
         when Key_F =>
            C := sfKeyF;
         when Key_G =>
            C := sfKeyG;
         when Key_H =>
            C := sfKeyH;
         when Key_I =>
            C := sfKeyI;
         when Key_J =>
            C := sfKeyJ;
         when Key_K =>
            C := sfKeyK;
         when Key_L =>
            C := sfKeyL;
         when Key_M =>
            C := sfKeyM;
         when Key_N =>
            C := sfKeyN;
         when Key_O =>
            C := sfKeyO;
         when Key_P =>
            C := sfKeyP;
         when Key_Q =>
            C := sfKeyQ;
         when Key_R =>
            C := sfKeyR;
         when Key_S =>
            C := sfKeyS;
         when Key_T =>
            C := sfKeyT;
         when Key_U =>
            C := sfKeyU;
         when Key_V =>
            C := sfKeyV;
         when Key_W =>
            C := sfKeyW;
         when Key_X =>
            C := sfKeyX;
         when Key_Y =>
            C := sfKeyY;
         when Key_Z =>
            C := sfKeyZ;
         when Key_Num_0 =>
            C := sfKeyNum0;
         when Key_Num_1 =>
            C := sfKeyNum1;
         when Key_Num_2 =>
            C := sfKeyNum2;
         when Key_Num_3 =>
            C := sfKeyNum3;
         when Key_Num_4 =>
            C := sfKeyNum4;
         when Key_Num_5 =>
            C := sfKeyNum5;
         when Key_Num_6 =>
            C := sfKeyNum6;
         when Key_Num_7 =>
            C := sfKeyNum7;
         when Key_Num_8 =>
            C := sfKeyNum8;
         when Key_Num_9 =>
            C := sfKeyNum9;
         when Key_Escape =>
            C := sfKeyEscape;
         when Key_L_Control =>
            C := sfKeyLControl;
         when Key_L_Shift =>
            C := sfKeyLShift;
         when Key_L_Alt =>
            C := sfKeyLAlt;
         when Key_L_System =>
            C := sfKeyLSystem;
         when Key_R_Control =>
            C := sfKeyRControl;
         when Key_R_Shift =>
            C := sfKeyRShift;
         when Key_R_Alt =>
            C := sfKeyRAlt;
         when Key_R_System =>
            C := sfKeyRSystem;
         when Key_Menu =>
            C := sfKeyMenu;
         when Key_L_Bracket =>
            C := sfKeyLBracket;
         when Key_R_Bracket =>
            C := sfKeyRBracket;
         when Key_Semicolon =>
            C := sfKeySemicolon;
         when Key_Comma =>
            C := sfKeyComma;
         when Key_Period =>
            C := sfKeyPeriod;
         when Key_Quote =>
            C := sfKeyQuote;
         when Key_Slash =>
            C := sfKeySlash;
         when Key_Backslash =>
            C := sfKeyBackslash;
         when Key_Tilde =>
            C := sfKeyTilde;
         when Key_Equal =>
            C := sfKeyEqual;
         when Key_Hyphen =>
            C := sfKeyHyphen;
         when Key_Space =>
            C := sfKeySpace;
         when Key_Enter =>
            C := sfKeyEnter;
         when Key_Back =>
            C := sfKeyBack;
         when Key_Tab =>
            C := sfKeyTab;
         when Key_Page_Up =>
            C := sfKeyPageUp;
         when Key_Page_Down =>
            C := sfKeyPageDown;
         when Key_End =>
            C := sfKeyEnd;
         when Key_Home =>
            C := sfKeyHome;
         when Key_Insert =>
            C := sfKeyInsert;
         when Key_Delete =>
            C := sfKeyDelete;
         when Key_Add =>
            C := sfKeyAdd;
         when Key_Subtract =>
            C := sfKeySubtract;
         when Key_Multiply =>
            C := sfKeyMultiply;
         when Key_Divide =>
            C := sfKeyDivide;
         when Key_Left =>
            C := sfKeyLeft;
         when Key_Right =>
            C := sfKeyRight;
         when Key_Up =>
            C := sfKeyUp;
         when Key_Down =>
            C := sfKeyDown;
         when Key_Numpad_0 =>
            C := sfKeyNum0;
         when Key_Numpad_1 =>
            C := sfKeyNum1;
         when Key_Numpad_2 =>
            C := sfKeyNum2;
         when Key_Numpad_3 =>
            C := sfKeyNum3;
         when Key_Numpad_4 =>
            C := sfKeyNum4;
         when Key_Numpad_5 =>
            C := sfKeyNum5;
         when Key_Numpad_6 =>
            C := sfKeyNum6;
         when Key_Numpad_7 =>
            C := sfKeyNum7;
         when Key_Numpad_8 =>
            C := sfKeyNum8;
         when Key_Numpad_9 =>
            C := sfKeyNum9;
         when Key_F1 =>
            C := sfKeyF1;
         when Key_F2 =>
            C := sfKeyF2;
         when Key_F3 =>
            C := sfKeyF3;
         when Key_F4 =>
            C := sfKeyF4;
         when Key_F5 =>
            C := sfKeyF5;
         when Key_F6 =>
            C := sfKeyF6;
         when Key_F7 =>
            C := sfKeyF7;
         when Key_F8 =>
            C := sfKeyF8;
         when Key_F9 =>
            C := sfKeyF9;
         when Key_F10 =>
            C := sfKeyF10;
         when Key_F11 =>
            C := sfKeyF11;
         when Key_F12 =>
            C := sfKeyF12;
         when Key_F13 =>
            C := sfKeyF13;
         when Key_F14 =>
            C := sfKeyF14;
         when Key_F15 =>
            C := sfKeyF15;
         when Key_Pause =>
            C := sfKeyPause;
         when Key_Count =>
            C := sfKeyCount;
         when others =>
            return raise Program_Error with "Bad conversion to sfKeyCode";
      end case;
      return C;
   end To_Sf_Keycode;

end Qv.Input.SFML;
